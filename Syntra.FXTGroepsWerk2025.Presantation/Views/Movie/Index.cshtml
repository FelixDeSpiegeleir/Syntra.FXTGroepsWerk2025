@model IEnumerable<OWN.GroupProject2.Objects.MovieModel>

@{
	ViewData["Title"] = "Index";
}

<style>
	table {
		background-color: rgba(173, 216, 230, 0.25);
		border: 3px solid black;
		border-radius: 20px;
		width: 100%;
		border-collapse: separate;
		border-spacing: 0;
	}

	th {
		background-color: blue;
		border: 3px solid black;
		padding: 10px;
	}

	td {
		border: 1px solid lightgrey;
		padding: 10px;
	}
</style>

<h2 class="text-center">📽ALL MOVIES📽</h2>

<p>
	<a asp-action="Create">MOVIE NOT IN LIST? CLICK HERE TO ADD IT!</a>
</p>

<p>
	<input type="text" id="searchInput" onkeyup="filterTable()" placeholder="Search for movies..">
</p>

<table class="table" id="moviesTable">
	<thead>
		<tr>
			<th onclick="sortTable(0)">
				@Html.DisplayNameFor(model => model.Duration)
			</th>
			<th onclick="sortTable(1)">
				@Html.DisplayNameFor(model => model.Year)
			</th>
			<th onclick="sortTable(2)">
				@Html.DisplayNameFor(model => model.Title)
			</th>
			<th onclick="sortTable(3)">
				@Html.DisplayNameFor(model => model.Genre)
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.Duration) Minutes
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Year)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Title)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Genre)
				</td>
				<td>
					@Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
					<a href="javascript:void(0);" onclick="checkIMDBId('@item.IMDBId')">
						IMDB
					</a>
				</td>
			</tr>
		}
	</tbody>
</table>

@section Scripts {
	<script>
		// Function to sort the table based on the column index
		function sortTable(columnIndex) {
										var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
										table = document.getElementById("moviesTable"); // Get the table element
										switching = true; // Set the switching flag to true
										dir = "asc"; // Set the sorting direction to ascending
										// Loop until no switching is needed
										while (switching) {
											switching = false; // Start by saying no switching is done
											rows = table.rows; // Get all the rows in the table
											// Loop through all table rows (except the first, which contains table headers)
											for (i = 1; i < (rows.length - 1); i++) {
												shouldSwitch = false; // Start by saying there should be no switching
												x = rows[i].getElementsByTagName("TD")[columnIndex]; // Get the current element
												y = rows[i + 1].getElementsByTagName("TD")[columnIndex]; // Get the next element
												// Check if the two rows should switch place, based on the direction, asc or desc
												if (dir == "asc") {
													if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
														shouldSwitch = true; // Mark as a switch and break the loop
														break;
													}
												} else if (dir == "desc") {
													if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
														shouldSwitch = true; // Mark as a switch and break the loop
														break;
													}
												}
											}
											if (shouldSwitch) {
												// If a switch has been marked, make the switch and mark that a switch has been done
												rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
												switching = true;
												switchcount++; // Increase switch count by 1
											} else {
												// If no switching has been done and the direction is "asc", set the direction to "desc" and run the while loop again
												if (switchcount == 0 && dir == "asc") {
													dir = "desc";
													switching = true;
												}
											}
										}
									}
		// Function to filter the table based on the search input
		function filterTable() {
										var input, filter, table, tr, td, i, j, txtValue;
										input = document.getElementById("searchInput"); // Get the search input element
										filter = input.value.toLowerCase(); // Get the search input value and convert to lowercase
										table = document.getElementById("moviesTable"); // Get the table element
										tr = table.getElementsByTagName("tr"); // Get all the rows in the table
										// Loop through all table rows (except the first, which contains table headers)
										for (i = 1; i < tr.length; i++) {
											tr[i].style.display = "none"; // Hide the row initially
											td = tr[i].getElementsByTagName("td"); // Get all the cells in the row
											// Loop through all cells in the row
											for (j = 0; j < td.length; j++) {
												if (td[j]) {
													txtValue = td[j].textContent || td[j].innerText; // Get the cell text content
													// If the cell text content matches the search input, display the row
													if (txtValue.toLowerCase().indexOf(filter) > -1) {
														tr[i].style.display = "";
														break;
													}
												}
											}
										}
									}
		// Functiion to see if IMDBId is blank
		function checkIMDBId(imdbId) {
											if (!imdbId) {
												alert("IMDB ID is not available for this movie.");
											} else {
												window.open("https://www.imdb.com/title/" + imdbId, "_blank", "noopener noreferrer");
											}
										}

	</script>
}
